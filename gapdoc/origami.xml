<?xml version="1.0" encoding="UTF-8"?>

<!--   The documentation for the origami package
-->

<!DOCTYPE Book SYSTEM "gapdoc.dtd">

<Book Name="Origami Package">

<TitlePage>
  <Title>The <Package>Origami</Package> Package</Title>
  <Subtitle>Computing Veechgroups of Origamis</Subtitle>
  <Date>&RELEASEDATE;</Date>
  <Version>Version &VERSION;</Version>
  <Author>Pascal Kattler
    <Email>kattler@math.uni-sb.de</Email>
    <Homepage>http://www.math.uni-sb.de/ag/weitze/</Homepage>
    <Address>
      AG Weitze-Schmithüsen<Br/>
      FR 6.1 Mathematik<Br/>
      Universität des Saarlandes<Br/>
      D-66041 Saarbrücken<Br/>
    </Address>

  </Author>
  <Author>Andrea Thevis
    <Email>thevis@math.uni-sb.de</Email>
    <Homepage>http://www.math.uni-sb.de/ag/weitze/</Homepage>
    <Address>
      AG Weitze-Schmithüsen<Br/>
      FR 6.1 Mathematik<Br/>
      Universität des Saarlandes<Br/>
      D-66041 Saarbrücken<Br/>
    </Address>
  </Author>

    <Copyright>&copyright; &RELEASEYEAR; by Pascal Kattler
    </Copyright>

    <Acknowledgements>
      Supported by Project I.8 of SFB-TRR 195 'Symbolic Tools in Mathematics and
      their Application' of the German Research Foundation (DFG).
    </Acknowledgements>


  </TitlePage>

<TableOfContents/>

<Body>
  <Chapter> <Heading>The Veechgroup of Origamis </Heading>
    <Section Label="sec:theory"> <Heading>Introduction</Heading>
    This package provides calculations with origamis. An origami (also known as square-tiled surface) is a finite covering of a torus
    which is ramified at most over one point. It can be described in the following way from
    two permutations <M>\sigma_x, \sigma_y \in S_d</M>. We take <M>d</M> squares <M>Q_1, \dots, Q_d</M> and glue the lower side of
    <M>Q_i</M> to the upper side of <M>Q_{\sigma_y(i)}</M> and the right side of <M>Q_i</M> to the left side of <M>Q_{\sigma_x(i)}</M>.
    We require origamis to be connected and thus the group generated by <M>\sigma_x</M> and <M>\sigma_y</M>  acts transitively on <M>\{1,\dots,d\}</M>.
    In this package we identify an origami with a pair of permutations, which acts transitively on <M>\{1, \dots, d\}</M> up
    to simultaneous conjugation. We introduce a new type of origamis, namely origami objects, which are created
    by this two permutations and its degree. The degree of an origami is the number of squares. Origamis are stored as such objects.



    We are mainly interested in the Veechgroup of an origami. It can be shown that the Veechgroup of an origami is
    a subgroup of <M>SL_2(\mathbb{Z})</M> of finite index. So we fix two generators of <M>SL_2(\mathbb{Z})</M>
    <Display>
      S =
     \left( {\begin{array}{cc}
      0 &amp; -1 \\
      1 &amp; 0 \\
     \end{array} } \right)
   </Display>

    and

    <Display>
      T =
     \left( {\begin{array}{cc}
      1 &amp; 1 \\
      0 &amp; 1 \\
     \end{array} } \right).
   </Display>
 </Section>

 <Section> <Heading> The Free Group </Heading>
    In this package we fix the free group <M>F</M> generated by <M>\tilde{S}</M> and <M>\tilde{T}</M>.
    We consider the canonical epimorphism <M>\pi: F\to SL_2(\mathbb{Z})</M> with <M>\pi(\tilde{S})=S</M> and <M>\pi(\tilde{T})=T</M>.

    </Section>

    <Section> <Heading>The Origami Object</Heading>
      In this section we describe the main functions of this package.
      <ManSection>
        <Func Name="ActionOfSpecialLinearGroup" Arg="word, origami"/>
        <Description>
          The group <M>SL_2(\mathbb{Z}) </M> acts on the set of origamis of fixed degree.
          Given a word in the free group  <M>Group(\tilde{S}, \tilde{T})</M> this function computes
          <M>\pi(word) \in SL_2(\mathbb{Z})</M> and returns <M>\pi(word).origami</M>. The word is given
          as a string, as shown in the following example.
<Example>
gap> ActionOfSpecialLinearGroup("ST",Origami((1,3,5), (1,3)(2,4,5), 5));
Origami((1,3)(2,5,4), (2,4,5,3), 5)
</Example>
        </Description>

<Func Name="ActionOfF2ViaCanonical" Arg="origami, word"/>
<Description>
 Given a word in the free group  <M>Group(\tilde{S}, \tilde{T})</M> this function computes
 <M>\pi(word) \in SL_2(\mathbb{Z})</M> and returns <M>\pi(word).origami</M>.
 But in contrast to <Ref Func="ActionOfSpecialLinearGroup"/> the result is stored in the canonical representation.
 ATTENTION: the order of arguments is switched compared to the order of the arguments in the function ActionOfSpecialLinearGroup.
  <Example>
gap> ActionOfF2ViaCanonical(Origami((1,2), (1,3), 3), "S");
Origami((1,2), (2,3), 3)
  </Example>
</Description>

<Func Name="RightActionOfF2ViaCanonical" Arg="origami, word"/>
<Description>
  This function computes the right action of the projection of a word in the free group <M>Group(\tilde{S}, \tilde{T})</M> on an Origami.
 It returns <M>Origami.\pi(word) = \pi(word)^-1.Origami</M>, where the left action
 is the common action of <M>_2(\mathbb{Z})</M> on 2-mannifolds. This action has
 the same orbits as the left action. For the Veechgroup computation both actions
 can be used and give the same result. In contrast to
 <Ref Func="ActionOfSpecialLinearGroup" /> the result is stored in the canonical representation.
 ATTENTION: the order of arguments is switched compared to the order of the arguments in the function ActionOfSpecialLinearGroup.
 <Example>
gap> RightActionOfF2ViaCanonical(Origami((2,3), (1,3,2), 3),"T");
Origami((1,2), (2,3), 3)
</Example>
</Description>

<Func Name="CanonicalOrigamiViaDelecroixAndStart" Arg="origami, start"/>
<Description>
          This function calculates a canonical representation of an origami depending on a given number start (Between 1 and the degree of
        of the origami). To determine a canonical numbering the algorithm starts at the square with number start. This sqare is
        labeled as 1 in the new numbering. The algorithm walks along the origami
        in the following way and numbers the squares in the order, they are visited. First it walks in horizontal direction until it reaches the
        square with number start again. Then it walks one step up (in vertical direction) and then again a loop in horizontal direction.
        This will be repeated until the vertical loop is complete or all squares have been visited. If there are unvisited squares,
        we continue with the smallest number (in the new numbering), that has not been in a vertical loop. An origami is connected,
        so that number exists. This function is used to determine a canonical origami independent of the starting point. The idea for the algorithm
        derives from the algorithm to_standard_form implemented in the SageMath package surface_dynamics. (REFERENZ HINZUFÜGEN!)
<Example>
gap> CanonicalOrigamiAndStart(Origami((1,10,7,6,8,9,2)(4,5),
> (1,8,5,4)(2,10,6)(3,9,7), 10), 1);
Origami((1,2,3,4,5,6,7)(8,9), (1,5,8,9)(2,4,7)(3,10,6), 10)
</Example>
</Description>

<Func Name="CanonicalOrigamiViaDelecroix" Arg="origami"/>
<Description> This function computes a canonical representation of an origami. It calculates the representation from CanonicalOrigamiViaDelecroixAndStart with
          all squares as start squares, independent of the given representation. Then it takes the minimum with respect to the order which &GAP; automatically
          uses to compare paires of permutations. Two origamis are equal (up to renumbering of the squares) if they are described by the same permutations in their canonical representation.
<Example>
gap> CanonicalOrigami(Origami((1,10,7,6,8,9,2)(4,5), (1,8,5,4)(2,10,6)(3,9,7), 10));
Origami((2,3,4,5,6,7,8)(9,10), (1,2,6)(3,5,7)(4,8,9,10), 10)
</Example>

</Description>
<!--
<Func Name="CanonicalOrigami" Arg="origami"/>
<Description>
    This function calculates a different canonical representation of an origami.
          Two origamis are equal if they are described by the same permutations in their
          canonical representation. This is an older slower Version.
<Example>
gap> CanonicalOrigami(Origami((1,10,7,6,8,9,2)(4,5), (1,8,5,4)(2,10,6)(3,9,7), 10));
Origami((1,2)(3,4,5,6,7,8,9), (1,2,3,7)(4,6,9)(5,10,8), 10)
</Example>

</Description>-->

        <Fam Name="OrigamiFamily"/>
        <Description>
          Since origamis do not fit in any existing family in &GAP;, we introduce a new family for origami objects called OrigamiFamily.
        </Description>

        <Attr Name="HorizontalPerm" Arg="origami"/>
        <Description>
           This function returns the horizontal permutation <M>\sigma_y</M> of an origami.
<Example>
gap> HorizontalPerm(Origami((1,3,5), (1,3)(2,4,5), 5));
(1,3,5)
</Example>
        </Description>

        <Attr Name="VerticalPerm" Arg="origami"/>
        <Description>
            This function returns the vertical permutation <M>\sigma_x</M> of an origami.
<Example>
gap> VerticalPerm( Origami((1,3,5), (1,3)(2,4,5), 5));
(1,3)(2,4,5)
</Example>
        </Description>

        <Attr Name="DegreeOrigami" Arg="origami"/>
        <Description>
        This function returns the degree of an origami.
<Example>
gap> DegreeOrigami(Origami((1,3,5), (1,3)(2,4,5), 5));
5
</Example>
        </Description>

        <Attr Name="Stratum" Arg="Origami"/>
        <Description>
           This function calculates the stratum of an origami. The stratum of an origami is a list of the nonzero degrees
           of the singularities. For a singularity with cone angle <M>2\pi k</M> the degree of the singularity is <M>k-1</M>.
<Example>
gap> Stratum(Origami((1,6,4,7,5,3)(2,8), (1,4,5,3,8,2,6), 8));
[ 1, 5 ]
</Example>
        </Description>

        <Attr Name="Genus" Arg="origami"/>
        <Description>
         This function calculates the genus of the origami surface.
<Example>
gap> Genus( Origami((1,2,3,4),(1,2)(3,4), 4) );
2
</Example>
        </Description>

        <Attr Name="VeechGroup" Arg="origami"/>
        <Description>
           This function calculates the Veechgroup of an origami. The Veechgroup <M>G</M> of an origami is a subgroup
           <M>SL_2(\mathbb{Z})</M> of finite index. The group is stored as a ModularSubgroup from the <Package>ModularSubgroup</Package>
           package. It is represented by two permutations <M>\sigma_S</M> and <M>\sigma_T</M> describing how the generators
           <M>S</M> and <M>T</M> of <M>SL_2(\mathbb{Z})</M> act on the cosets of <M>G</M> in <M>SL_2(\mathbb{Z})</M>.
           E.g, if <M>SH_i = H_j</M> and <M>H_i,H_j</M> are the cosets associated to the integers <M>i,j</M>, respectively, then
           <M>\sigma_S(i)=j</M>.

           The algorithm was introduced by Gabriela Weitze-Schmithüsen in (REFERENZ HINZUFÜGEN!).

           You get the coset permutations using the <Package>ModularSubgroup</Package> package as in the following example.
        <Example>
gap> SAction(VeechGroup(Origami((1,2,5)(3,4,6), (1,2)(5,6), 6)));
(1,3)(2,5)(4,7)(6,8)(9,10)
gap> TAction(VeechGroup(Origami((1,2,5)(3,4,6), (1,2)(5,6), 6)));
(1,2,4)(3,6)(5,8,7,9,10)
        </Example>
        </Description>

        <Attr Name="Cosets" Arg="origami"/>
        <Description>
           This function calculates the right cosets of the Veechgroup of an origami as a list of words in <M>S</M>
           and <M>T</M>.
<Example>
gap> Cosets(Origami((1,2,5)(3,4,6), (1,2)(5,6), 6));
[ &lt; identity ...>, T, S, T^2, T*S, S*T, T^2*S, T*S*T, T^2*S*T, T^2*S*T^2 ]
</Example>
        </Description>

        <Func Name="EquivalentOrigami" Arg="origami1, origami2"/>
        <Description>
          This function tests whether origami1 is equal  to origami2 up to renumbering of the squares.
<Example>
gap> EquivalentOrigami(Origami((1,4)(2,6,3), (1,5)(2,3,6,4), 6), Origami((1,4,3)
>(2,5), (1,5,3,4)(2,6), 6));
true

gap> EquivalentOrigami(Origami((1,4)(2,6,3), (1,5)(2,3,6,4), 6), Origami((1,2,5)
>(3,4,6), (1,2)(5,6), 6));
false
</Example>
        </Description>

        <!-- ToDo
        <Func Name="" Arg=""/>
        <Description>
        <Example>
        </Example>
        </Description>

DeclareGlobalFunction("ActionOfT");
DeclareGlobalFunction("ActionOfS");
DeclareGlobalFunction("ActionOfInvT");
DeclareGlobalFunction("ActionOfInvS");

DeclareGlobalFunction("CycleStructureFromPartition");
DeclareGlobalFunction("CanonicalPermFromCycleStructure");
DeclareGlobalFunction("CanonicalPermFromPartition");
DeclareGlobalFunction("CanonicalPerm");

DeclareGlobalFunction("IsConnectedOrigami");

DeclareGlobalFunction("AddHash");
DeclareGlobalFunction("ContainHash");
DeclareGlobalFunction("hashForPermutations");
DeclareGlobalFunction("hashForOrigamis");


DeclareCategory("IsOrigami", IsObject);


DeclareAttribute("indexOrigami", IsOrigami);


BindGlobal(
  "Origami", function(horizontal, vertical, d)
    local Obj, ori;
    ori:= rec(d := d, x := horizontal, y := vertical);
    Obj:= rec();

    ObjectifyWithAttributes( Obj, NewType(OrigamiFamily, IsOrigami and IsAttributeStoringRep) , HorizontalPerm, ori.x, VerticalPerm, ori.y, DegreeOrigami, d );
    return Obj;
  end
  );



#! @Arguments d
#! @Returns a random origami
#! @Description This creates a random origami of degree d.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("ExampleOrigami");

#! @Arguments Origami
#! @Returns A list with tree entrys
#! @Description This function is used to calculate some attributes.
#!             It calculates the Veechgroup of a given origami and .
#!              the veechgroup is stored as ModularGroup Object from the ModularGroup package.
#!  			The cosets of the veechgroup is stored in a list of words in the generators S and T
#!  			of the matrix group Sl_2(Z).
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("CalcVeechGroup");

#! @Arguments Origami
#! @Returns A list with tree entrys
#! @Description This function is used to calculate some attributes.
#!             It calculates the Veechgroup of a given origami and .
#!              the veechgroup is stored as ModularGroup Object from the ModularGroup package.
#!  			The cosets of the veechgroup is stored in a list of words in the generators S and T
#!  			of the matrix group Sl_2(Z).
#!        In Contrast to CalcVeechGroup, this uses equivalent tests instead of canonical Origamis.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("CalcVeechGroupViaEquivalentTest");

#! @Arguments Origami
#! @Returns A list with tree entrys
#! @Description This function is used to calculate some attributes.
#!             It calculates the Veechgroup of a given origami and .
#!              the veechgroup is stored as ModularGroup Object from the ModularGroup package.
#!  			The cosets of the veechgroup is stored in a list of words in the generators S and T
#!  			of the matrix group Sl_2(Z). In contrast to CalcVeechGroup, this uses hash tables to
#!				store Origamis.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("CalcVeechGroupWithHashTables");

#! @Arguments Origami
#! @Returns true or false
#!Description This Function tests weather the veechgrouo of the origami is the full group $Sl_2(mathbb{Z})$. This can be much
#! faster than calculating the veechgroup and then check weather it is $Sl_2(mathbb{Z})$, in the case, that the Index of the
#! Veechgroup is large.
#! @ChapterInfo he Origami object, The Origami object
DeclareGlobalFunction("HasVeechGroupSl_2");

#! @Arguments Origami
#! @Returns record of the form rec(d := * , x := *, y := *)
#! Describtion This calculates a record representation for an origami object.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("ToRec");


DeclareGlobalFunction("CalcOrigamiList");

DeclareGlobalFunction("CalcOrigamiListForx");

DeclareGlobalFunction("CalcOrigamiListWithSubroutine");

DeclareGlobalFunction("CalcOrigamiListExperiment");

DeclareGlobalFunction("CalcH1_1");

DeclareGlobalFunction("RepresentantsH1_1");

DeclareGlobalFunction("CalcListOfH1_1WithFullVeechGroup");



DeclareGlobalFunction("CalcMatrix");
DeclareGlobalFunction("DecompositionOfMatritToFreeGroup");
DeclareGlobalFunction("ToMatrix");
DeclareGlobalFunction("SameCoset");
DeclareGlobalFunction("ElemOfVeechGroup");
DeclareGlobalFunction("MatrixInVeechGroup");


BindGlobal("KinderzeichnungenFamily",NewFamily("Kinderzeichnug"));
DeclareCategory("IsKinderzeichnung", IsObject);

DeclareAttribute("PermX", IsKinderzeichnung);

DeclareAttribute("PermY", IsKinderzeichnung);

BindGlobal(
  "Kinderzeichnung", function(horizontal, vertical)
    local Obj, kind;
    kind:= rec( x := horizontal, y := vertical);
    Obj:= rec();

    ObjectifyWithAttributes( Obj, NewType(KinderzeichnungenFamily, IsKinderzeichnung and IsAttributeStoringRep) , PermX, kind.x, PermY, kind.y );
    return Obj;
  end
  );

DeclareGlobalFunction("KinderzeichnungenFromCuspsOfOrigami");




The action of Sl into a own sexćtion ?

        -->
      </ManSection>
    </Section>
  </Chapter>
</Body>

<!--<Bibliography Databases="3k+1" /> -->
<TheIndex/>

</Book>
