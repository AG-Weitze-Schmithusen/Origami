  
  [1X1 [33X[0;0YThe Origami object[133X[101X
  
  
  [1X1.1 [33X[0;0YThe action on the Origami[133X[101X
  
  [1X1.1-1 ActionOfSl[101X
  
  [29X[2XActionOfSl[102X( [3Xword[103X, [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ythe Origami Object word.Origami[133X
  
  [33X[0;0YThis  lets act a word in the free group [23XGroup(S, T)[123X ,representing an element
  of [23XSl_2(\mathbb{Z})[123X on an Origami and returns [23Xword.Origami[123X.[133X
  
  [1X1.1-2 ActionOfF2ViaCanonical[101X
  
  [29X[2XActionOfF2ViaCanonical[102X( [3Xword[103X, [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ythe Origami Object word.Origami[133X
  
  [33X[0;0YThis  lets act a word in the free group [23XGroup(S, T)[123X, representing an element
  of [23XSl_2(\mathbb{Z})[123X, on an Origami and returns word.Origami. But in contrast
  to "ActionOfSl" the result is stored in the canonical representation.[133X
  
  [1X1.1-3 RightActionOfF2ViaCanonical[101X
  
  [29X[2XRightActionOfF2ViaCanonical[102X( [3Xword[103X, [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ythe Origami Object Origami.word[133X
  
  [33X[0;0YThis  lets act a word in the free group [23XGroup(S, T)[123X on an Origami from right
  and  returns  [23XOrigami.word  =  word^-1.Origami[123X, where the left action is the
  common  action of [23XSl_2(\mathbb{Z})[123X on 2 mannifolds. This action has the same
  Veechgroup  and  orbits  as the left action. In contrast to "ActionOfSl" the
  result is stored in the canonical representation.[133X
  
  
  [1X1.2 [33X[0;0YThe Origami object[133X[101X
  
  [1X1.2-1 CanonicalOrigamiViaDelecroixAndStart[101X
  
  [29X[2XCanonicalOrigamiViaDelecroixAndStart[102X( [3XOrigami[103X, [3Xstart[103X ) [32X function
  [6XReturns:[106X  [33X[0;10YAn Origami[133X
  
  [33X[0;0YThis  calculates  a  canonical  representation  of an origami depending on a
  given  number  start  (Between  1  and  the  degree  of  of the Origami). To
  determine  a  canonical  numbering  the  algorithm starts at the square with
  number  start  and  walks  over the origami in a certain way and numbers the
  squares  in  the  order,  they  are  visited  . First it walks in horizontal
  direction  one  loop. Then it walks one step up (in vertical direection) and
  then  again  a  loop in horizontal direction. This wil be repeated until the
  vertical  loop  is  complete  or all squares have been visited. If there are
  unvisited  squares,  we  continue  with  the  smallest  number  (in  the new
  numbering),  that  has not been in a vertical loop. An Origami is connected,
  so  that  number exists. Two origamis are equal if they are described by the
  same permutations in their canonical representation.[133X
  
  [1X1.2-2 CanonicalOrigamiViaDelecroix[101X
  
  [29X[2XCanonicalOrigamiViaDelecroix[102X( [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10YAn Origami[133X
  
  [33X[0;0YThis  calculates a canonical representation of an origami. It calculates the
  representation  from CanonicalOrigamiViaDelecroixAndStart with several start
  squares,  independent of the given representation. Then it takes the minimum
  with  respect to some order. Two origamis are equal if they are described by
  the same permutations in their canonical representation.[133X
  
  [1X1.2-3 CanonicalOrigami[101X
  
  [29X[2XCanonicalOrigami[102X( [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10YAn Origami[133X
  
  [33X[0;0YThis  calculates  a  canonical  representation of an origami, represented as
  record  rec(d  :=  *  ,  x := *, y := *). Two origamis are equal if they are
  described by the same permutations in their canonical representation.[133X
  
  [1X1.2-4 VerticalPerm[101X
  
  [29X[2XVerticalPerm[102X( [3XOrigami[103X ) [32X attribute
  [6XReturns:[106X  [33X[0;10Ya permutation[133X
  
  [33X[0;0YThis returns the horizontal permutation [23X\sigma_x[123X of the Origami.[133X
  
  [1X1.2-5 HorizontalPerm[101X
  
  [29X[2XHorizontalPerm[102X( [3XOrigami[103X ) [32X attribute
  [6XReturns:[106X  [33X[0;10Ya permutation[133X
  
  [33X[0;0YThis returns the vertical permutation [23X\sigma_y[123X of the Origami.[133X
  
  [1X1.2-6 DegreeOrigami[101X
  
  [29X[2XDegreeOrigami[102X( [3XOrigami[103X ) [32X attribute
  [6XReturns:[106X  [33X[0;10Yan integer[133X
  
  [33X[0;0YThis returns the degree of an Origami.[133X
  
  [1X1.2-7 Stratum[101X
  
  [29X[2XStratum[102X( [3XOrigami[103X ) [32X attribute
  [6XReturns:[106X  [33X[0;10Ya list of integers[133X
  
  [33X[0;0YThis  calculates  the stratum of an Origami. That is a list of the orders of
  the singularities.[133X
  
  [1X1.2-8 VeechGroup[101X
  
  [29X[2XVeechGroup[102X( [3XOrigami[103X ) [32X attribute
  [6XReturns:[106X  [33X[0;10Ya ModularSubgroup object[133X
  
  [33X[0;0YThis  calculates  the  Veechgroup  of  an  Origami.  This  is  a subgroup of
  [23XSl_2(\mathbb{Z})[123X  of  finite  degree. The group is stored as ModularSubgroup
  from the ModularSubgroup package. The Veechgroup is represented as the coset
  permutations  [23X\sigma_S[123X  and [23X\sigma_T[123X with respect to the generators [23XS[123X and [23XT[123X.
  This  means if [23Xi[123X is the integer associated to the rigth coset [23XG[123X (Cosets( O )
  [  i  ]  VeechGroup  =  H)  then  we  have  for  the  coset H, associated to
  [23X\sigma_S(i)[123X, that [23XSG = H[123X. Dito for [23X\sigma_T[123X.[133X
  
  [1X1.2-9 Cosets[101X
  
  [29X[2XCosets[102X( [3XOrigami[103X ) [32X attribute
  [6XReturns:[106X  [33X[0;10Ya list of words in the Free group, generated by [23XS[123X and [23XT[123X.[133X
  
  [33X[0;0YThis Calculates the right cosets of the Veechgroup of an Origami.[133X
  
  [1X1.2-10 Equals[101X
  
  [29X[2XEquals[102X( [3XOrigami1[103X, [3XOrigami2[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ytrue or false[133X
  
  [33X[0;0YThis  tests  wether  Origami1  is  equal  to Origami2 with same numbering of
  squares. That is, the defining permutations are the same.[133X
  
  [1X1.2-11 EquivalentOrigami[101X
  
  [29X[2XEquivalentOrigami[102X( [3XOrigami1[103X, [3XOrigami2[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ytrue or false[133X
  
  [33X[0;0YThis  tests  wether  Origami1 is equal up to Origami2 up to numbering of the
  squares.[133X
  
  [1X1.2-12 ExampleOrigami[101X
  
  [29X[2XExampleOrigami[102X( [3Xd[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ya random origami[133X
  
  [33X[0;0YThis creates a random origami of degree d.[133X
  
  [1X1.2-13 CalcVeechGroup[101X
  
  [29X[2XCalcVeechGroup[102X( [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10YA list with tree entrys[133X
  
  [33X[0;0YThis  function  is  used  to  calculate  some  attributes. It calculates the
  Veechgroup of a given origami and . the veechgroup is stored as ModularGroup
  Object from the ModularGroup package. The cosets of the veechgroup is stored
  in a list of words in the generators S and T of the matrix group Sl_2(Z).[133X
  
  [1X1.2-14 CalcVeechGroupViaEquivalentTest[101X
  
  [29X[2XCalcVeechGroupViaEquivalentTest[102X( [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10YA list with tree entrys[133X
  
  [33X[0;0YThis  function  is  used  to  calculate  some  attributes. It calculates the
  Veechgroup of a given origami and . the veechgroup is stored as ModularGroup
  Object from the ModularGroup package. The cosets of the veechgroup is stored
  in a list of words in the generators S and T of the matrix group Sl_2(Z). In
  Contrast  to CalcVeechGroup, this uses equivalent tests instead of canonical
  Origamis.[133X
  
  [1X1.2-15 CalcVeechGroupWithHashTables[101X
  
  [29X[2XCalcVeechGroupWithHashTables[102X( [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10YA list with tree entrys[133X
  
  [33X[0;0YThis  function  is  used  to  calculate  some  attributes. It calculates the
  Veechgroup of a given origami and . the veechgroup is stored as ModularGroup
  Object from the ModularGroup package. The cosets of the veechgroup is stored
  in a list of words in the generators S and T of the matrix group Sl_2(Z). In
  contrast to CalcVeechGroup, this uses hash tables to store Origamis.[133X
  
  [1X1.2-16 CalcStratum[101X
  
  [29X[2XCalcStratum[102X( [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Ynothing[133X
  
  [33X[0;0YCalculates  the  stratum of an object and sets its attribute. The stratum is
  stored as list of integers.[133X
  
  [1X1.2-17 ToRec[101X
  
  [29X[2XToRec[102X( [3XOrigami[103X ) [32X function
  [6XReturns:[106X  [33X[0;10Yrecord  of  the form rec(d := * , x := *, y := *) Describtion This
            calculates a record representation for an origami object.[133X
  
