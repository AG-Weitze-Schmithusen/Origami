#! @Chapter Functions for Dessins d'enfants
#! @ChapterLabel Functions for Dessins d'enfants

#! This section lists all functions used for Dessin d'enfants
#! @Section  Functions for Dessins d'enfants
BindGlobal("DessinFamily",NewFamily("Dessin"));
DeclareCategory("IsDessin", IsObject);
#! @Returns a permutation
#! @Arguments Dessin
#! @Description
#! This returns the horizontal permutation $\sigma_x$ of the Dessin.
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! Dessin((1,2,3), (2,3))
#! gap> PermX(D);
#! (1,2,3)
#! @EndExampleSession
DeclareAttribute("PermX", IsDessin);

#! @Returns a permutation
#! @Arguments Dessin
#! @Description
#! This returns the vertical permutation $\sigma_x$ of the Dessin.
#!
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! Dessin((1,2,3), (2,3))
#! gap> PermY(D);
#! (2,3)
#! @EndExampleSession
DeclareAttribute("PermY", IsDessin);

#! @Returns A Dessin.
#! @Arguments A pair of permutions.
#! @Description
#! This function constructs a Dessin object given by monodromy actions.
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! Dessin((1,2,3), (2,3))
#! @EndExampleSession
DeclareOperation("Dessin", [IsPerm, IsPerm]);


#! @Returns A record.
#! @Arguments A Dessin
#! @Description
#! This function returns the valency list of a Dessin.
#! It returns a record with [TODO]
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! Dessin((1,2,3), (2,3))
#! gap> ValencyList(D);
#! rec( black := [ 3 ], white := [ 2 ] )
#! @EndExampleSession
DeclareAttribute("ValencyList", IsDessin);

#! @Returns A non-negative integer.
#! @Arguments A Dessin.
#! @Description
#! This function calculates the genus of the Dessin, (so the genus of the underlying closed Riemann surface(?))
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! gap> Genus(D);
#! 0
#! @EndExampleSession
DeclareAttribute("Genus", IsDessin);

DeclareGlobalFunction("NormalDessinsForm");

DeclareGlobalFunction("DessinOfOrigami");

DeclareGlobalFunction("AllDessinsOfOrigami");

#! @Description
#! This calculates the degree of the Dessin surface.
#! @Returns a natural number
#! @Arguments Dessin
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! Dessin((1,2,3), (2,3))
#! gap> DegreeDessin(D);
#! 3
#! @EndExampleSession
DeclareAttribute("DegreeDessin", IsDessin);

#! @Description
#! This checks wheter the Dessin is connected, so wheter the group generated by $sigma_x$ and $sigma_y$ acts transitiv on [1..deg(D)]
#! @Returns A boolean.
#! @Arguments A Dessin.
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! Dessin((1,2,3), (2,3))
#! gap> IsConnectedDessin(D);
#! true
#! @EndExampleSession
DeclareAttribute("IsConnectedDessin", IsDessin);

#! @Description
#! This function returns the connected components of the Dessin.
#! @Returns A list.
#! @Arguments A Dessin.
#! @BeginExampleSession
#! gap> D:=Dessin((1,2,3),(2,3));
#! Dessin((1,2,3), (2,3))
#! gap> ConnectedComponentsDessin(D);
#! [ Dessin((1,2,3), (2,3)) ]
#! @EndExampleSession
DeclareGlobalFunction("ConnectedComponentsDessin");

DeclareGlobalFunction("OrigamiGraph");
