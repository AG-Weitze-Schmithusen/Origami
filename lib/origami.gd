BindGlobal("OrigamiFamily",NewFamily("Origami"));
DeclareCategory("IsOrigami", IsObject);

#! @Description
#! This returns the horizontal permutation $\sigma_x$ of the Origami.
#! @Returns a permutation
#! @Arguments Origami
#! @ChapterInfo The Origami object, The Origami object
DeclareAttribute("VerticalPerm", IsOrigami);

#! @Description
#! This returns the vertical permutation $\sigma_y$ of the Origami.
#! @Returns a permutation
#! @Arguments Origami
#! @ChapterInfo The Origami object, The Origami object
DeclareAttribute("HorizontalPerm", IsOrigami);

#! @Description
#! This returns the degree of an Origami.
#! @Returns an integer
#! @Arguments Origami
#! @ChapterInfo The Origami object, The Origami object
DeclareAttribute("DegreeOrigami", IsOrigami);

#! @Description
#! This calculates the stratum of an Origami. That is a list of the orders of the singularities.
#! @Returns a list of integers
#! @Arguments Origami
#! @ChapterInfo The Origami object, The Origami object
DeclareAttribute("Stratum", IsOrigami);

#! @Description
#! This calculates the genus of the Origami surface.
#! @Returns an natural number
#! @Arguments Origami
#! @ChapterInfo The Origami object, The Origami object
DeclareAttribute("Genus", IsOrigami);

DeclareAttribute("indexOrigami", IsOrigami);

#! @Description
#! This calculates the Veechgroup of an Origami. This is a subgroup of $Sl_2(\mathbb{Z})$ of finite degree. The group is
#! stored as ModularSubgroup from the ModularSubgroup package. The Veechgroup is represented as the coset permutations $\sigma_S$
#! and $\sigma_T$ with respect to the generators $S$ and $T$. This means if $i$ is the integer associated to the rigth coset $G$ (Cosets( O ) [ i ] VeechGroup = H)
#! then we have for the coset H, associated to $\sigma_S(i)$, that $SG = H$. Dito for $\sigma_T$.
#! @Returns a ModularSubgroup object
#! @Arguments Origami
#! @ChapterInfo The Origami object, The Origami object
DeclareAttribute("VeechGroup", IsOrigami);

#! @Description
#! This Calculates the right cosets of the Veechgroup of an Origami.
#! @Returns a list of words in the Free group, generated by $S$ and $T$.
#! @Arguments Origami
#! @ChapterInfo The Origami object, The Origami object
DeclareAttribute("Cosets", IsOrigami);

# This attribute stores, weather -I is in the Veech group of the Origami.
DeclareAttribute("MinusIdendityInVeechGroup", IsOrigami);

DeclareGlobalFunction("IsConnectedOrigami");

DeclareOperation("Origami", [IsPerm, IsPerm]);

DeclareGlobalFunction("OrigamiNC");



#BindGlobal(
#	"Origami", function(horizontal, vertical, d)
#		local Obj, ori;
#if IsTransitive( Group(horizontal, vertical) ) = false 
#			then Error("The described surface is not connected. The permutation group, generated by the two permutations, must act transitive on [1..d] ");
#		fi;
#		ori:= rec(d := d, x := horizontal, y := vertical);
#		Obj:= rec();
#
#		ObjectifyWithAttributes( Obj, NewType(OrigamiFamily, IsOrigami and IsAttributeStoringRep) , HorizontalPerm, ori.x, VerticalPerm, ori.y, DegreeOrigami, d );
#		return Obj;
#	end
#	);


#! @Arguments Origami1, Origami2
#! @Returns true or false
#! @Description This tests wether Origami1 is equal to Origami2 with same numbering of squares.
#!              That is, the defining permutations are the same.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("Equals");

#! @Arguments Origami1, Origami2
#! @Returns true or false
#! @Description This tests wether Origami1 is equal up to Origami2 up to numbering of the squares.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("EquivalentOrigami");

#! @Arguments d
#! @Returns a random origami
#! @Description This creates a random origami of degree d.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("ExampleOrigami");

#! @Arguments Origami
#! @Returns A list with tree entrys
#! @Description This function is used to calculate some attributes.
#!             It calculates the Veechgroup of a given origami and .
#!              the veechgroup is stored as ModularGroup Object from the ModularGroup package.
#!  			The cosets of the veechgroup is stored in a list of words in the generators S and T
#!  			of the matrix group Sl_2(Z).
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("CalcVeechGroup");

#! @Arguments Origami
#! @Returns A list with tree entrys
#! @Description This function is used to calculate some attributes.
#!             It calculates the Veechgroup of a given origami and .
#!              the veechgroup is stored as ModularGroup Object from the ModularGroup package.
#!  			The cosets of the veechgroup is stored in a list of words in the generators S and T
#!  			of the matrix group Sl_2(Z).
#!        In Contrast to CalcVeechGroup, this uses equivalent tests instead of canonical Origamis.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("CalcVeechGroupViaEquivalentTest");

#! @Arguments Origami
#! @Returns A list with tree entrys
#! @Description This function is used to calculate some attributes.
#!             It calculates the Veechgroup of a given origami and .
#!              the veechgroup is stored as ModularGroup Object from the ModularGroup package.
#!  			The cosets of the veechgroup is stored in a list of words in the generators S and T
#!  			of the matrix group Sl_2(Z). In contrast to CalcVeechGroup, this uses hash tables to
#!				store Origamis.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("CalcVeechGroupWithHashTables");

DeclareGlobalFunction("CalcVeechGroupWithHashTablesOld");

#! @Arguments Origami
#! @Returns true or false
#!Description This Function tests weather the veechgrouo of the origami is the full group $Sl_2(mathbb{Z})$. This can be much
#! faster than calculating the veechgroup and then check weather it is $Sl_2(mathbb{Z})$, in the case, that the Index of the
#! Veechgroup is large.
#! @ChapterInfo he Origami object, The Origami object
DeclareGlobalFunction("HasVeechGroupSl_2");

#! @Arguments Origami
#! @Returns record of the form rec(d := * , x := *, y := *)
#! Describtion This calculates a record representation for an origami object.
#! @ChapterInfo The Origami object, The Origami object
DeclareGlobalFunction("ToRec");

DeclareGlobalFunction("SL2Orbit");

DeclareOperation("SL2Representants", [IsObject]);

DeclareGlobalFunction("KinderzeichnungenFromCuspsOfOrigami");
